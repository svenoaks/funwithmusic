package com.smp.funwithmusic.objects;

import org.json.JSONObject;

import android.content.Context;
import android.util.Log;

import com.afollestad.cardsui.Card;
import com.loopj.android.http.JsonHttpResponseHandler;
import com.smp.funwithmusic.apiclient.*;

public class SongCard extends Card
{
	private static final long serialVersionUID = 889236084780166774L;

	private Song song;

	public Song getSong()
	{
		return song;
	}
	
	
	public SongCard(final Song song, Context context)
	{
		super(song.getTitle(), song.getAlbum());
		this.song = song;
		 Log.i("URL", "DERRR");
		ItunesClient.get(song.getAlbum(), new JsonHttpResponseHandler() {
			@Overridepublic static String encode(String input) {
		        StringBuilder resultStr = new StringBuilder();
		        for (char ch : input.toCharArray()) {
		            if (isUnsafe(ch)) {
		                resultStr.append('%');
		                resultStr.append(toHex(ch / 16));
		                resultStr.append(toHex(ch % 16));
		            } else {
		                resultStr.append(ch);
		            }
		        }
		        return resultStr.toString();
		    }

		    private static char toHex(int ch) {
		        return (char) (ch < 10 ? '0' + ch : 'A' + ch - 10);
		    }

		    private static boolean isUnsafe(char ch) {
		        if (ch > 128 || ch < 0)
		            return true;
		        return " %$&+,/:;=?@<>#%".indexOf(ch) >= 0;
		    }public static String encode(String input) {
		        StringBuilder resultStr = new StringBuilder();
		        for (char ch : input.toCharArray()) {
		            if (isUnsafe(ch)) {
		                resultStr.append('%');
		                resultStr.append(toHex(ch / 16));
		                resultStr.append(toHex(ch % 16));
		            } else {
		                resultStr.append(ch);
		            }
		        }
		        return resultStr.toString();
		    }

		    private static char toHex(int ch) {
		        return (char) (ch < 10 ? '0' + ch : 'A' + ch - 10);
		    }

		    private static boolean isUnsafe(char ch) {
		        if (ch > 128 || ch < 0)
		            return true;
		        return " %$&+,/:;=?@<>#%".indexOf(ch) >= 0;
		    }public static String encode(String input) {
		        StringBuilder resultStr = new StringBuilder();
		        for (char ch : input.toCharArray()) {
		            if (isUnsafe(ch)) {
		                resultStr.append('%');
		                resultStr.append(toHex(ch / 16));
		                resultStr.append(toHex(ch % 16));
		            } else {
		                resultStr.append(ch);
		            }
		        }
		        return resultStr.toString();
		    }

		    private static char toHex(int ch) {
		        return (char) (ch < 10 ? '0' + ch : 'A' + ch - 10);
		    }

		    private static boolean isUnsafe(char ch) {
		        if (ch > 128 || ch < 0)
		            return true;
		        return " %$&+,/:;=?@<>#%".indexOf(ch) >= 0;
		    }public static String encode(String input) {
		        StringBuilder resultStr = new StringBuilder();
		        for (char ch : input.toCharArray()) {
		            if (isUnsafe(ch)) {
		                resultStr.append('%');
		                resultStr.append(toHex(ch / 16));
		                resultStr.append(toHex(ch % 16));
		            } else {
		                resultStr.append(ch);
		            }
		        }
		        return resultStr.toString();
		    }

		    private static char toHex(int ch) {
		        return (char) (ch < 10 ? '0' + ch : 'A' + ch - 10);
		    }

		    private static boolean isUnsafe(char ch) {
		        if (ch > 128 || ch < 0)
		            return true;
		        return " %$&+,/:;=?@<>#%".indexOf(ch) >= 0;
		    }public static String encode(String input) {
		        StringBuilder resultStr = new StringBuilder();
		        for (char ch : input.toCharArray()) {
		            if (isUnsafe(ch)) {
		                resultStr.append('%');
		                resultStr.append(toHex(ch / 16));
		                resultStr.append(toHex(ch % 16));
		            } else {
		                resultStr.append(ch);
		            }
		        }
		        return resultStr.toString();
		    }

		    private static char toHex(int ch) {
		        return (char) (ch < 10 ? '0' + ch : 'A' + ch - 10);
		    }

		    private static boolean isUnsafe(char ch) {
		        if (ch > 128 || ch < 0)
		            return true;
		        return " %$&+,/:;=?@<>#%".indexOf(ch) >= 0;
		    }public static String encode(String input) {
		        StringBuilder resultStr = new StringBuilder();
		        for (char ch : input.toCharArray()) {
		            if (isUnsafe(ch)) {
		                resultStr.append('%');
		                resultStr.append(toHex(ch / 16));
		                resultStr.append(toHex(ch % 16));
		            } else {
		                resultStr.append(ch);
		            }
		        }
		        return resultStr.toString();
		    }

		    private static char toHex(int ch) {
		        return (char) (ch < 10 ? '0' + ch : 'A' + ch - 10);
		    }

		    private static boolean isUnsafe(char ch) {
		        if (ch > 128 || ch < 0)
		            return true;
		        return " %$&+,/:;=?@<>#%".indexOf(ch) >= 0;
		    }
		    public void onSuccess(JSONObject obj) {
		       String url = ItunesClient.getImageUrl(obj, song.getArtist());
		       Log.i("URL", url + "JFJKKJF");
		    }
		});
	}
	
	
	
}
